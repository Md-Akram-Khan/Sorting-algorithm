/*
#include <iostream>
#include <vector>
using namespace std;

void merge_sort(int low, int high, vector<int> &nums) {
    if (low == high) return; 
    
    int mid = (low + high) / 2;
    
    merge_sort(low, mid, nums);
    merge_sort(mid + 1, high, nums);
    
    vector<int> temp;
    int left = low, right = mid + 1;
    
    while (left <= mid && right <= high) {
        if (nums[left] <= nums[right]) {
            temp.push_back(nums[left++]);
        } else {
            temp.push_back(nums[right++]);
        }
    }
    
    while (left <= mid) {
        temp.push_back(nums[left++]);
    }
    
    while (right <= high) {
        temp.push_back(nums[right++]);
    }
    
    for (int i = low; i <= high; i++) {
        nums[i] = temp[i - low];
    }
}

int main() {
    vector<int> nums = {38, 27, 43, 3, 9, 82, 10};
    
    cout << "Original array: ";
    for (int num : nums) {
        cout << num << " ";
    }
    cout << endl;
    
    merge_sort(0, nums.size() - 1, nums);
    
    cout << "Sorted array: ";
    for (int num : nums) {
        cout << num << " ";
    }
    cout << endl;
    
    return 0;
}
*/
void merge(int low, int mid, int high, vector<int> &nums)
{
    int left = low, right = mid + 1;
    vector<int> temp;
    while(left <= mid && right <= high)
    {
        if(nums[left] <= nums[right])
            {
                temp.push_back(nums[left]);
                left++;
            }
        else 
            {
                temp.push_back(nums[right]);
                right++;
            }
    }
    while(left <= mid)
    {
        temp.push_back(nums[left]);
        left++;
    }
    while(right <= high)
    {
        temp.push_back(nums[right]);
        right++;
    }
    for(int i = low; i <= high; i++)
    {
        nums[i] = temp [i - low];
    }
}
void divide(int low, int high, vector<int> &nums)
{
    if(low == high) return;
    int mid = (low + high) / 2;
    divide(low, mid, nums);
    divide(mid + 1, high, nums);
    merge(low, mid, high, nums);
}
vector<int> mergeSort(vector<int>& nums) {
    divide(0, nums.size() - 1, nums);
    return nums;
}
